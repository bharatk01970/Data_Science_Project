def apply_column_combination(self, result_rows, columns_to_combine, new_column_name, 
                             reference_column='', repeat_columns=None):
    """Combine multiple columns into separate rows with optional reference-based repetition
    
    Args:
        result_rows: List of row dictionaries
        columns_to_combine: List of column names to combine
        new_column_name: Name for the new combined column
        reference_column: Column to use as reference for repetition (optional)
        repeat_columns: List of columns whose values should repeat (optional)
    
    Returns:
        List of row dictionaries with combined column, each value in separate row
    
    Example:
        A = [A1, A2, A3], B = [B1, B2] (reference), C = [C1]
        If repeat A: Output = A1, A2, A3, B1, A1, A2, A3, B2, C1
    """
    if not columns_to_combine or not new_column_name:
        return result_rows
    
    if repeat_columns is None:
        repeat_columns = []
    
    combined_rows = []
    
    for row in result_rows:
        # Collect all values from all columns to combine
        column_values = {}  # {column_name: [list of values]}
        
        for col in columns_to_combine:
            if col in row and row[col]:
                value = row[col]
                # Split multi-values
                if isinstance(value, str) and (',' in value or ';' in value):
                    split_vals = self.split_multi_values(value)
                    column_values[col] = [v for v in split_vals if v]
                else:
                    column_values[col] = [str(value)] if value else []
            else:
                column_values[col] = []
        
        # DEBUG: Print what we collected
        print(f"\n=== DEBUG: Processing Row ===")
        print(f"Columns to combine: {columns_to_combine}")
        print(f"Column values collected:")
        for col, vals in column_values.items():
            print(f"  {col}: {vals}")
        print(f"Reference column: '{reference_column}'")
        print(f"Repeat columns: {repeat_columns}")
        
        # Get reference column values if specified
        ref_values = []
        if reference_column and reference_column in column_values:
            ref_values = column_values[reference_column]
            print(f"Reference values found: {ref_values}")
        else:
            print(f"No reference values (reference_column='{reference_column}', in column_values={reference_column in column_values})")
        
        # If no reference or no repeat columns, just combine all values
        if not reference_column or not repeat_columns or not ref_values:
            print("MODE: Simple combination (no repetition)")
            # Simple combination - all values in order, each in separate row
            all_values = []
            for col in columns_to_combine:
                all_values.extend(column_values.get(col, []))
            
            print(f"All values to add: {all_values}")
            
            # Create one row per value
            for value in all_values:
                new_row = {}
                # Copy non-combined columns
                for key, val in row.items():
                    if key not in columns_to_combine:
                        new_row[key] = val
                # Add combined column with single value
                new_row[new_column_name] = value
                combined_rows.append(new_row)
                print(f"Added row: {new_column_name} = {value}")
        
        else:
            # Reference-based repetition
            print("MODE: Reference-based repetition")
            
            # Separate columns into categories
            other_columns = [col for col in columns_to_combine 
                           if col != reference_column and col not in repeat_columns]
            
            print(f"Repeat columns: {repeat_columns}")
            print(f"Other columns (non-repeat, non-ref): {other_columns}")
            
            # For each reference value, add repeated columns + reference value
            for idx, ref_val in enumerate(ref_values):
                print(f"\n  --- Processing reference value {idx+1}/{len(ref_values)}: {ref_val} ---")
                
                # Add all values from repeat columns
                for repeat_col in repeat_columns:
                    repeat_vals = column_values.get(repeat_col, [])
                    print(f"    Adding {len(repeat_vals)} values from repeat column '{repeat_col}': {repeat_vals}")
                    
                    for val in repeat_vals:
                        new_row = {}
                        # Copy non-combined columns
                        for key, val_orig in row.items():
                            if key not in columns_to_combine:
                                new_row[key] = val_orig
                        # Add combined column value
                        new_row[new_column_name] = val
                        combined_rows.append(new_row)
                        print(f"      Added: {new_column_name} = {val}")
                
                # Add the reference value itself
                new_row = {}
                for key, val_orig in row.items():
                    if key not in columns_to_combine:
                        new_row[key] = val_orig
                new_row[new_column_name] = ref_val
                combined_rows.append(new_row)
                print(f"    Added reference: {new_column_name} = {ref_val}")
            
            # Add values from other (non-repeat, non-reference) columns - only once at the end
            print(f"\n  --- Adding other columns (once only) ---")
            for other_col in other_columns:
                other_vals = column_values.get(other_col, [])
                print(f"    Adding {len(other_vals)} values from other column '{other_col}': {other_vals}")
                
                for val in other_vals:
                    new_row = {}
                    for key, val_orig in row.items():
                        if key not in columns_to_combine:
                            new_row[key] = val_orig
                    new_row[new_column_name] = val
                    combined_rows.append(new_row)
                    print(f"      Added: {new_column_name} = {val}")
        
        print(f"\nTotal rows generated from this input row: {len(combined_rows)}")
        print("=== END DEBUG ===\n")
    
    return combined_rows