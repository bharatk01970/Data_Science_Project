# Import tkinter for GUI framework - provides window management and user interface components
import tkinter as tk
# Import ttk for themed tkinter widgets - provides modern styled GUI elements
from tkinter import ttk, filedialog, messagebox, simpledialog
# Import pandas for data manipulation - handles CSV/Excel file reading and DataFrame operations
import pandas as pd
# Import json for JSON parsing - attempts to parse dictionary-like strings as JSON objects
import json
# Import ast for abstract syntax tree evaluation - safely evaluates Python literal expressions
import ast
# Import os for operating system interface - handles file path operations and system interactions
import os
# Import typing for type hints - provides static type checking support
from typing import Dict, List, Any, Optional
# Import chardet for automatic encoding detection
import chardet
# Import copy for deep copying data structures
import copy

# Define the main GUI application class that encapsulates all CSV processing functionality
class CSVProcessorGUI:
    # Constructor method that initializes the GUI application and sets up initial state
    def __init__(self, root):
        # Store reference to the main tkinter root window for later use
        self.root = root
        # Set the window title that appears in the title bar
        self.root.title("CSV Dictionary Field Processor - Enhanced Dynamic Mapping")
        # Set the initial window size (width x height in pixels)
        self.root.geometry("850x700")
        
        # Initialize empty string to store the path of the selected input file
        self.input_file_path = ""
        # Initialize empty dictionary to store mapping between field names and their mapping file paths
        self.mapping_files = {}
        # Initialize None to store the loaded pandas DataFrame containing the input data
        self.df = None
        # Initialize empty list to store field names selected by the user for processing
        self.selected_fields = []
        # Initialize empty dictionary to store fields identified as containing dictionary-like data
        self.dictionary_fields = {}
        # Initialize empty dictionary to store user-selected keys for each dictionary field
        self.selected_keys = {}
        # Initialize empty dictionary to store loaded mapping data as DataFrames
        self.mapping_data = {}
        # Initialize None to store stage 1 processed data before mapping
        self.stage1_data = None
        # Initialize flag to track if stage 1 processing is complete
        self.stage1_complete = False
        # Initialize dictionary to store checkbox variables for field selection
        self.field_checkboxes = {}
        
        # NEW: Store the current working dataframe (updated after each mapping)
        self.current_working_data = None
        # NEW: List to track mapping operations in sequence
        self.mapping_sequence = []
        # NEW: Store row addition mappings
        self.row_addition_mappings = []
        # NEW: Store processed data after each step
        self.processed_data = None
        
        # Call the UI setup method to create and arrange all GUI components
        self.setup_ui()
    
    # Method to create and configure all GUI elements and their layout
    def setup_ui(self):
        # Create the main container frame with padding for visual spacing
        main_frame = ttk.Frame(self.root, padding="10")
        # Place the main frame in the root window using grid layout manager
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure the root window's first column to expand horizontally when window resizes
        self.root.columnconfigure(0, weight=1)
        # Configure the root window's first row to expand vertically when window resizes
        self.root.rowconfigure(0, weight=1)
        # Configure the main frame's second column to expand horizontally
        main_frame.columnconfigure(1, weight=1)
        
        # Create section header label for file loading with bold font
        ttk.Label(main_frame, text="1. Load Input File:", font=('TkDefaultFont', 10, 'bold')).grid(
            row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 5))
        
        # Create button to trigger file selection dialog
        ttk.Button(main_frame, text="Select Input File", 
                  command=self.load_input_file).grid(row=1, column=0, sticky=tk.W, pady=(0, 10))
        
        # Create label to display the name of the selected input file
        self.input_file_label = ttk.Label(main_frame, text="No file selected")
        self.input_file_label.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(0, 10))
        
        # Create section header label for field selection
        ttk.Label(main_frame, text="2. Select Fields for Processing:", 
                 font=('TkDefaultFont', 10, 'bold')).grid(
            row=2, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
        
        # Create container frame for field selection controls
        field_frame = ttk.Frame(main_frame)
        field_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        field_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # Create canvas with scrollbar for checkboxes
        field_canvas = tk.Canvas(field_frame, height=120, highlightthickness=0)
        field_scrollbar = ttk.Scrollbar(field_frame, orient="vertical", command=field_canvas.yview)
        self.field_checkbox_frame = ttk.Frame(field_canvas)
        
        self.field_checkbox_frame.bind(
            "<Configure>",
            lambda e: field_canvas.configure(scrollregion=field_canvas.bbox("all"))
        )
        
        field_canvas.create_window((0, 0), window=self.field_checkbox_frame, anchor="nw")
        field_canvas.configure(yscrollcommand=field_scrollbar.set)
        
        field_canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        field_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        field_frame.rowconfigure(0, weight=1)
        
        # Enable mouse wheel scrolling for field canvas
        def on_field_mousewheel(event):
            field_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        field_canvas.bind_all("<MouseWheel>", on_field_mousewheel)
        
        # Create section header label for stage 1 processing
        ttk.Label(main_frame, text="3. Stage 1 Processing:", 
                 font=('TkDefaultFont', 10, 'bold')).grid(
            row=4, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
        
        # Create button for stage 1 processing
        self.stage1_button = ttk.Button(main_frame, text="Process Stage 1 (Dictionary Expansion)", 
                  command=self.process_stage1, state='disabled')
        self.stage1_button.grid(row=5, column=0, sticky=tk.W, pady=(0, 10))
        
        # Create label to show stage 1 status
        self.stage1_status_label = ttk.Label(main_frame, text="")
        self.stage1_status_label.grid(row=5, column=1, sticky=tk.W, padx=(10, 0), pady=(0, 10))
        
        # NEW: Create section for dynamic mapping management
        ttk.Label(main_frame, text="4. Dynamic Mapping Management:", 
                 font=('TkDefaultFont', 10, 'bold')).grid(
            row=6, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
        
        # Create sub-frame container for mapping operations
        mapping_frame = ttk.Frame(main_frame)
        mapping_frame.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # NEW: Buttons for different mapping operations
        button_row1 = ttk.Frame(mapping_frame)
        button_row1.grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 5))
        
        self.add_column_mapping_button = ttk.Button(button_row1, text="Add Column Mapping", 
                  command=self.add_column_mapping_file, state='disabled')
        self.add_column_mapping_button.pack(side=tk.LEFT, padx=(0, 5))
        
        self.add_row_mapping_button = ttk.Button(button_row1, text="Add Row Mapping", 
                  command=self.add_row_mapping_file, state='disabled')
        self.add_row_mapping_button.pack(side=tk.LEFT, padx=(0, 5))
        
        self.clear_mappings_button = ttk.Button(button_row1, text="Clear All Mappings", 
                  command=self.clear_all_mappings, state='disabled')
        self.clear_mappings_button.pack(side=tk.LEFT, padx=(0, 5))
        
        # Create listbox to display mapping sequence
        mapping_label = ttk.Label(mapping_frame, text="Mapping Sequence:")
        mapping_label.grid(row=1, column=0, sticky=tk.W, pady=(5, 2))
        
        self.mapping_listbox = tk.Listbox(mapping_frame, height=4)
        self.mapping_listbox.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))
        mapping_frame.columnconfigure(0, weight=1)
        
        # Current columns display
        self.current_columns_label = ttk.Label(mapping_frame, text="Current columns: None", 
                                               font=('TkDefaultFont', 8), foreground='blue')
        self.current_columns_label.grid(row=3, column=0, columnspan=2, sticky=tk.W)
        
        # Create stage 2 process button with accent styling
        self.stage2_button = ttk.Button(main_frame, text="Process Stage 2 (Final Output)", 
                  command=self.process_stage2, style='Accent.TButton', state='disabled')
        self.stage2_button.grid(row=8, column=0, columnspan=2, pady=10)
        
        # Create export button initially disabled until data is processed
        self.export_button = ttk.Button(main_frame, text="Export Results", 
                                       command=self.export_data, state='disabled')
        self.export_button.grid(row=9, column=0, columnspan=2, pady=5)
        
        # Create StringVar to hold status messages for dynamic updates
        self.status_var = tk.StringVar(value="Ready to load file...")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W)
        status_bar.grid(row=10, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))