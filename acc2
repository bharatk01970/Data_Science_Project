Complete Code for New and Updated Functions1. NEW FUNCTION: apply_reference_based_repetitionInsert BEFORE apply_column_combination (around line 550)def apply_reference_based_repetition(self, result_rows, reference_columns, combined_column_name):
    """Apply reference-based repetition - create combined output with repeated values"""
    if not reference_columns:
        return result_rows
    
    combined_rows = []
    
    for row in result_rows:
        combined_values = []
        
        # Get reference column values
        ref_values_list = []
        for ref_col in reference_columns:
            if ref_col in row and row[ref_col]:
                values = self.split_multi_values(row[ref_col])
                values = [v for v in values if v]
                if values:
                    ref_values_list.extend(values)
        
        # If no reference values, skip this row
        if not ref_values_list:
            ref_values_list = ['']
        
        # Get non-reference columns
        non_ref_columns = [col for col in row.keys() if col not in reference_columns]
        
        # For each reference value, add all non-reference values, then the reference value
        for ref_val in ref_values_list:
            # Add all non-reference column values
            for col in non_ref_columns:
                if row[col]:
                    values = self.split_multi_values(row[col])
                    combined_values.extend([v for v in values if v])
            
            # Add the reference value
            if ref_val:
                combined_values.append(ref_val)
        
        # Create new row with combined column
        new_row = {combined_column_name: ', '.join(combined_values) if combined_values else ''}
        combined_rows.append(new_row)
    
    return combined_rows2. UPDATED FUNCTION: show_column_combination_popupReplace entire function (around line 470)def show_column_combination_popup(self, columns):
    """Show popup to select columns for combination with reference-based repetition"""
    popup = tk.Toplevel(self.root)
    popup.title("Column Combination & Reference-Based Repetition")
    popup.geometry("550x650")
    popup.transient(self.root)
    popup.grab_set()
    
    ttk.Label(popup, text="Column Combination & Reference-Based Repetition (Optional)", 
              font=('TkDefaultFont', 11, 'bold')).pack(pady=10)
    
    # Create notebook for two options
    notebook = ttk.Notebook(popup)
    notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
    
    # TAB 1: Column Combination
    combine_frame = ttk.Frame(notebook)
    notebook.add(combine_frame, text="Column Combination")
    
    ttk.Label(combine_frame, text="Select columns to combine into a single column:", 
              font=('TkDefaultFont', 9)).pack(pady=5, padx=10, anchor=tk.W)
    
    # Create scrollable frame for checkboxes
    canvas_frame1 = ttk.Frame(combine_frame)
    canvas_frame1.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
    
    canvas1 = tk.Canvas(canvas_frame1, highlightthickness=0)
    scrollbar1 = ttk.Scrollbar(canvas_frame1, orient="vertical", command=canvas1.yview)
    scrollable_frame1 = ttk.Frame(canvas1)
    
    scrollable_frame1.bind(
        "<Configure>",
        lambda e: canvas1.configure(scrollregion=canvas1.bbox("all"))
    )
    
    canvas1.create_window((0, 0), window=scrollable_frame1, anchor="nw")
    canvas1.configure(yscrollcommand=scrollbar1.set)
    
    canvas1.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar1.pack(side=tk.RIGHT, fill=tk.Y)
    
    # Create checkboxes for each column
    column_vars = {}
    for col in sorted(columns):
        var = tk.BooleanVar(value=False)
        column_vars[col] = var
        cb = ttk.Checkbutton(scrollable_frame1, text=col, variable=var)
        cb.pack(anchor=tk.W, padx=5, pady=2)
    
    # TAB 2: Reference-Based Repetition
    reference_frame = ttk.Frame(notebook)
    notebook.add(reference_frame, text="Reference-Based Repetition")
    
    ttk.Label(reference_frame, text="Select reference column(s) for value repetition:", 
              font=('TkDefaultFont', 9)).pack(pady=5, padx=10, anchor=tk.W)
    ttk.Label(reference_frame, text="Other columns will repeat based on the reference column's value count.", 
              font=('TkDefaultFont', 8), foreground='gray').pack(pady=2, padx=10, anchor=tk.W)
    
    # Create scrollable frame for reference column checkboxes
    canvas_frame2 = ttk.Frame(reference_frame)
    canvas_frame2.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
    
    canvas2 = tk.Canvas(canvas_frame2, highlightthickness=0)
    scrollbar2 = ttk.Scrollbar(canvas_frame2, orient="vertical", command=canvas2.yview)
    scrollable_frame2 = ttk.Frame(canvas2)
    
    scrollable_frame2.bind(
        "<Configure>",
        lambda e: canvas2.configure(scrollregion=canvas2.bbox("all"))
    )
    
    canvas2.create_window((0, 0), window=scrollable_frame2, anchor="nw")
    canvas2.configure(yscrollcommand=scrollbar2.set)
    
    canvas2.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar2.pack(side=tk.RIGHT, fill=tk.Y)
    
    # Create checkboxes for reference columns
    reference_vars = {}
    for col in sorted(columns):
        var = tk.BooleanVar(value=False)
        reference_vars[col] = var
        cb = ttk.Checkbutton(scrollable_frame2, text=col, variable=var)
        cb.pack(anchor=tk.W, padx=5, pady=2)
    
    result = {'combine': False, 'columns': [], 'new_name': '', 'reference_columns': [], 'combined_name': ''}
    
    def confirm():
        selected_cols = [col for col, var in column_vars.items() if var.get()]
        selected_refs = [col for col, var in reference_vars.items() if var.get()]
        
        # Check if both options are selected
        if selected_cols and selected_refs:
            messagebox.showwarning("Warning", "Please select either Column Combination OR Reference-Based Repetition, not both.")
            return
        
        # Handle Column Combination
        if selected_cols:
            if len(selected_cols) < 2:
                messagebox.showwarning("Warning", "Please select at least 2 columns to combine")
                return
            
            # Ask for new column name
            new_name = simpledialog.askstring(
                "New Column Name",
                f"Enter name for combined column containing values from:\n{', '.join(selected_cols)}",
                parent=popup
            )
            
            if new_name and new_name.strip():
                result['combine'] = True
                result['columns'] = selected_cols
                result['new_name'] = new_name.strip()
                popup.destroy()
            else:
                messagebox.showwarning("Warning", "Please enter a valid column name")
        
        # Handle Reference-Based Repetition
        elif selected_refs:
            # Ask for combined column name
            combined_name = simpledialog.askstring(
                "Combined Column Name",
                f"Enter name for the combined output column:\n(Will contain repeated values based on: {', '.join(selected_refs)})",
                parent=popup
            )
            
            if combined_name and combined_name.strip():
                result['reference_columns'] = selected_refs
                result['combined_name'] = combined_name.strip()
                popup.destroy()
            else:
                messagebox.showwarning("Warning", "Please enter a valid column name")
        
        else:
            messagebox.showwarning("Warning", "Please select columns for either combination or reference-based repetition")
    
    def skip():
        popup.destroy()
    
    button_frame = ttk.Frame(popup)
    button_frame.pack(pady=10)
    ttk.Button(button_frame, text="Apply Selection", command=confirm).pack(side=tk.LEFT, padx=5)
    ttk.Button(button_frame, text="Skip (No Changes)", command=skip).pack(side=tk.LEFT, padx=5)
    
    popup.wait_window()
    return result3. UPDATED CODE SECTION in process_stage1 methodFind and replace this section (around line 690)FIND THIS:# Show column combination popup
            combination_result = self.show_column_combination_popup(temp_stage1_columns)
            
            # Apply column combination if selected
            if combination_result.get('combine'):
                self.stage1_data = self.apply_column_combination(
                    temp_stage1_data,
                    combination_result['columns'],
                    combination_result['new_name']
                )
            else:
                self.stage1_data = temp_stage1_dataREPLACE WITH THIS:# Show column combination popup
            combination_result = self.show_column_combination_popup(temp_stage1_columns)
            
            # Apply column combination if selected
            if combination_result.get('combine'):
                self.stage1_data = self.apply_column_combination(
                    temp_stage1_data,
                    combination_result['columns'],
                    combination_result['new_name']
                )
                self.status_var.set(f"Applied column combination: {combination_result['new_name']}")
            # Apply reference-based repetition if selected
            elif combination_result.get('reference_columns'):
                self.stage1_data = self.apply_reference_based_repetition(
                    temp_stage1_data,
                    combination_result['reference_columns'],
                    combination_result['combined_name']
                )
                ref_cols_str = ', '.join(combination_result['reference_columns'])
                self.status_var.set(f"Applied reference-based repetition using column(s): {ref_cols_str}")
                messagebox.showinfo("Reference-Based Repetition Applied", 
                                    f"Values repeated based on reference column(s): {ref_cols_str}\n"
                                    f"Combined column: {combination_result['combined_name']}\n"
                                    f"Total rows generated: {len(self.stage1_data)}")
            else:
                self.stage1_data = temp_stage1_dataSummary:1 NEW function added: apply_reference_based_repetition1 COMPLETE function replaced: show_column_combination_popup1 SMALL section updated: In process_stage1 methodCopy and paste these exact code blocks into your file at the specified locations! ✅